// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gtstore.proto
#ifndef GRPC_gtstore_2eproto__INCLUDED
#define GRPC_gtstore_2eproto__INCLUDED

#include "gtstore.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace gtstore {

// Service definitions
class ManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "gtstore.ManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::gtstore::RegisterAck* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::RegisterAck>> AsyncRegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::RegisterAck>>(AsyncRegisterNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::RegisterAck>> PrepareAsyncRegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::RegisterAck>>(PrepareAsyncRegisterNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::gtstore::NodeInfoList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::NodeInfoList>> AsyncGetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::NodeInfoList>>(AsyncGetNodeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::NodeInfoList>> PrepareAsyncGetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::NodeInfoList>>(PrepareAsyncGetNodeInfoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo* request, ::gtstore::RegisterAck* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo* request, ::gtstore::RegisterAck* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::NodeInfoList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::NodeInfoList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::RegisterAck>* AsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::RegisterAck>* PrepareAsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::NodeInfoList>* AsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::NodeInfoList>* PrepareAsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::gtstore::RegisterAck* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::RegisterAck>> AsyncRegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::RegisterAck>>(AsyncRegisterNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::RegisterAck>> PrepareAsyncRegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::RegisterAck>>(PrepareAsyncRegisterNodeRaw(context, request, cq));
    }
    ::grpc::Status GetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::gtstore::NodeInfoList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::NodeInfoList>> AsyncGetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::NodeInfoList>>(AsyncGetNodeInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::NodeInfoList>> PrepareAsyncGetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::NodeInfoList>>(PrepareAsyncGetNodeInfoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo* request, ::gtstore::RegisterAck* response, std::function<void(::grpc::Status)>) override;
      void RegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo* request, ::gtstore::RegisterAck* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::NodeInfoList* response, std::function<void(::grpc::Status)>) override;
      void GetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::NodeInfoList* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gtstore::RegisterAck>* AsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gtstore::RegisterAck>* PrepareAsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gtstore::NodeInfoList>* AsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gtstore::NodeInfoList>* PrepareAsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterNode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNodeInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterNode(::grpc::ServerContext* context, const ::gtstore::NodeInfo* request, ::gtstore::RegisterAck* response);
    virtual ::grpc::Status GetNodeInfo(::grpc::ServerContext* context, const ::gtstore::Empty* request, ::gtstore::NodeInfoList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterNode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterNode(::grpc::ServerContext* /*context*/, const ::gtstore::NodeInfo* /*request*/, ::gtstore::RegisterAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterNode(::grpc::ServerContext* context, ::gtstore::NodeInfo* request, ::grpc::ServerAsyncResponseWriter< ::gtstore::RegisterAck>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::NodeInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodeInfo(::grpc::ServerContext* context, ::gtstore::Empty* request, ::grpc::ServerAsyncResponseWriter< ::gtstore::NodeInfoList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterNode<WithAsyncMethod_GetNodeInfo<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterNode() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gtstore::NodeInfo, ::gtstore::RegisterAck>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gtstore::NodeInfo* request, ::gtstore::RegisterAck* response) { return this->RegisterNode(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterNode(
        ::grpc::MessageAllocator< ::gtstore::NodeInfo, ::gtstore::RegisterAck>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gtstore::NodeInfo, ::gtstore::RegisterAck>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterNode(::grpc::ServerContext* /*context*/, const ::gtstore::NodeInfo* /*request*/, ::gtstore::RegisterAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterNode(
      ::grpc::CallbackServerContext* /*context*/, const ::gtstore::NodeInfo* /*request*/, ::gtstore::RegisterAck* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gtstore::Empty, ::gtstore::NodeInfoList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gtstore::Empty* request, ::gtstore::NodeInfoList* response) { return this->GetNodeInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetNodeInfo(
        ::grpc::MessageAllocator< ::gtstore::Empty, ::gtstore::NodeInfoList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gtstore::Empty, ::gtstore::NodeInfoList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::NodeInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodeInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::NodeInfoList* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterNode<WithCallbackMethod_GetNodeInfo<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterNode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterNode(::grpc::ServerContext* /*context*/, const ::gtstore::NodeInfo* /*request*/, ::gtstore::RegisterAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::NodeInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterNode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterNode(::grpc::ServerContext* /*context*/, const ::gtstore::NodeInfo* /*request*/, ::gtstore::RegisterAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::NodeInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodeInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterNode() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterNode(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterNode(::grpc::ServerContext* /*context*/, const ::gtstore::NodeInfo* /*request*/, ::gtstore::RegisterAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterNode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNodeInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::NodeInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodeInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterNode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gtstore::NodeInfo, ::gtstore::RegisterAck>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gtstore::NodeInfo, ::gtstore::RegisterAck>* streamer) {
                       return this->StreamedRegisterNode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterNode(::grpc::ServerContext* /*context*/, const ::gtstore::NodeInfo* /*request*/, ::gtstore::RegisterAck* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gtstore::NodeInfo,::gtstore::RegisterAck>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNodeInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNodeInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gtstore::Empty, ::gtstore::NodeInfoList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gtstore::Empty, ::gtstore::NodeInfoList>* streamer) {
                       return this->StreamedGetNodeInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNodeInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNodeInfo(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::NodeInfoList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNodeInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gtstore::Empty,::gtstore::NodeInfoList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterNode<WithStreamedUnaryMethod_GetNodeInfo<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterNode<WithStreamedUnaryMethod_GetNodeInfo<Service > > StreamedService;
};

class StorageNode final {
 public:
  static constexpr char const* service_full_name() {
    return "gtstore.StorageNode";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::gtstore::ValueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::ValueResponse>> AsyncGet(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::ValueResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::ValueResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::ValueResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Put(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::gtstore::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>> AsyncPut(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>> PrepareAsyncPut(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>>(PrepareAsyncPutRaw(context, request, cq));
    }
    virtual ::grpc::Status Remove(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::gtstore::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>> AsyncRemove(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>>(AsyncRemoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>> PrepareAsyncRemove(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>>(PrepareAsyncRemoveRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Get(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::ValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::ValueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::gtstore::KeyValuePair* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::gtstore::KeyValuePair* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Remove(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Remove(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::ValueResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::ValueResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>* AsyncPutRaw(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>* AsyncRemoveRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>* PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Get(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::gtstore::ValueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::ValueResponse>> AsyncGet(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::ValueResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::ValueResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::ValueResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Put(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::gtstore::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>> AsyncPut(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>> PrepareAsyncPut(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>>(PrepareAsyncPutRaw(context, request, cq));
    }
    ::grpc::Status Remove(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::gtstore::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>> AsyncRemove(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>>(AsyncRemoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>> PrepareAsyncRemove(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>>(PrepareAsyncRemoveRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Get(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::ValueResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::ValueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Put(::grpc::ClientContext* context, const ::gtstore::KeyValuePair* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)>) override;
      void Put(::grpc::ClientContext* context, const ::gtstore::KeyValuePair* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Remove(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)>) override;
      void Remove(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gtstore::ValueResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gtstore::ValueResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* AsyncPutRaw(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* AsyncRemoveRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Put_;
    const ::grpc::internal::RpcMethod rpcmethod_Remove_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::gtstore::KeyRequest* request, ::gtstore::ValueResponse* response);
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::gtstore::KeyValuePair* request, ::gtstore::Ack* response);
    virtual ::grpc::Status Remove(::grpc::ServerContext* context, const ::gtstore::KeyRequest* request, ::gtstore::Ack* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::ValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::gtstore::KeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::gtstore::ValueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::gtstore::KeyValuePair* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::gtstore::KeyValuePair* request, ::grpc::ServerAsyncResponseWriter< ::gtstore::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Remove() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemove(::grpc::ServerContext* context, ::gtstore::KeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::gtstore::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<WithAsyncMethod_Put<WithAsyncMethod_Remove<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gtstore::KeyRequest, ::gtstore::ValueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gtstore::KeyRequest* request, ::gtstore::ValueResponse* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::gtstore::KeyRequest, ::gtstore::ValueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gtstore::KeyRequest, ::gtstore::ValueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::ValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::ValueResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Put() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gtstore::KeyValuePair, ::gtstore::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gtstore::KeyValuePair* request, ::gtstore::Ack* response) { return this->Put(context, request, response); }));}
    void SetMessageAllocatorFor_Put(
        ::grpc::MessageAllocator< ::gtstore::KeyValuePair, ::gtstore::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gtstore::KeyValuePair, ::gtstore::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::gtstore::KeyValuePair* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::gtstore::KeyValuePair* /*request*/, ::gtstore::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Remove() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::gtstore::KeyRequest, ::gtstore::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gtstore::KeyRequest* request, ::gtstore::Ack* response) { return this->Remove(context, request, response); }));}
    void SetMessageAllocatorFor_Remove(
        ::grpc::MessageAllocator< ::gtstore::KeyRequest, ::gtstore::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gtstore::KeyRequest, ::gtstore::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Remove(
      ::grpc::CallbackServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::Ack* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Get<WithCallbackMethod_Put<WithCallbackMethod_Remove<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::ValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::gtstore::KeyValuePair* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Remove() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::ValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Put() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::gtstore::KeyValuePair* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Remove() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::ValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Put() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Put(context, request, response); }));
    }
    ~WithRawCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::gtstore::KeyValuePair* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Remove() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Remove(context, request, response); }));
    }
    ~WithRawCallbackMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Remove(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gtstore::KeyRequest, ::gtstore::ValueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gtstore::KeyRequest, ::gtstore::ValueResponse>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::ValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gtstore::KeyRequest,::gtstore::ValueResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Put() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gtstore::KeyValuePair, ::gtstore::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gtstore::KeyValuePair, ::gtstore::Ack>* streamer) {
                       return this->StreamedPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::gtstore::KeyValuePair* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gtstore::KeyValuePair,::gtstore::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Remove() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gtstore::KeyRequest, ::gtstore::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gtstore::KeyRequest, ::gtstore::Ack>* streamer) {
                       return this->StreamedRemove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::gtstore::KeyRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gtstore::KeyRequest,::gtstore::Ack>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Remove<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Remove<Service > > > StreamedService;
};

class ClientService final {
 public:
  static constexpr char const* service_full_name() {
    return "gtstore.ClientService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Init(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::gtstore::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>> AsyncInit(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>> PrepareAsyncInit(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>>(PrepareAsyncInitRaw(context, request, cq));
    }
    virtual ::grpc::Status Finalize(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::gtstore::Ack* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>> AsyncFinalize(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>>(AsyncFinalizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>> PrepareAsyncFinalize(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>>(PrepareAsyncFinalizeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Init(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Finalize(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Finalize(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>* AsyncInitRaw(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>* AsyncFinalizeRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gtstore::Ack>* PrepareAsyncFinalizeRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Init(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::gtstore::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>> AsyncInit(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>> PrepareAsyncInit(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>>(PrepareAsyncInitRaw(context, request, cq));
    }
    ::grpc::Status Finalize(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::gtstore::Ack* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>> AsyncFinalize(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>>(AsyncFinalizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>> PrepareAsyncFinalize(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>>(PrepareAsyncFinalizeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Init(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)>) override;
      void Init(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Finalize(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)>) override;
      void Finalize(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* AsyncInitRaw(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* AsyncFinalizeRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* PrepareAsyncFinalizeRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Init_;
    const ::grpc::internal::RpcMethod rpcmethod_Finalize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::gtstore::ClientInitRequest* request, ::gtstore::Ack* response);
    virtual ::grpc::Status Finalize(::grpc::ServerContext* context, const ::gtstore::Empty* request, ::gtstore::Ack* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::gtstore::ClientInitRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::gtstore::ClientInitRequest* request, ::grpc::ServerAsyncResponseWriter< ::gtstore::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Finalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Finalize() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Finalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finalize(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinalize(::grpc::ServerContext* context, ::gtstore::Empty* request, ::grpc::ServerAsyncResponseWriter< ::gtstore::Ack>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Init<WithAsyncMethod_Finalize<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Init() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gtstore::ClientInitRequest, ::gtstore::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gtstore::ClientInitRequest* request, ::gtstore::Ack* response) { return this->Init(context, request, response); }));}
    void SetMessageAllocatorFor_Init(
        ::grpc::MessageAllocator< ::gtstore::ClientInitRequest, ::gtstore::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gtstore::ClientInitRequest, ::gtstore::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::gtstore::ClientInitRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::gtstore::ClientInitRequest* /*request*/, ::gtstore::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Finalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Finalize() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gtstore::Empty, ::gtstore::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gtstore::Empty* request, ::gtstore::Ack* response) { return this->Finalize(context, request, response); }));}
    void SetMessageAllocatorFor_Finalize(
        ::grpc::MessageAllocator< ::gtstore::Empty, ::gtstore::Ack>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gtstore::Empty, ::gtstore::Ack>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Finalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finalize(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Finalize(
      ::grpc::CallbackServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::Ack* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Init<WithCallbackMethod_Finalize<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::gtstore::ClientInitRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Finalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Finalize() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Finalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finalize(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Init() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::gtstore::ClientInitRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Finalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Finalize() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Finalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finalize(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinalize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Init() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Init(context, request, response); }));
    }
    ~WithRawCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::gtstore::ClientInitRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Finalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Finalize() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Finalize(context, request, response); }));
    }
    ~WithRawCallbackMethod_Finalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Finalize(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Finalize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gtstore::ClientInitRequest, ::gtstore::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gtstore::ClientInitRequest, ::gtstore::Ack>* streamer) {
                       return this->StreamedInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::gtstore::ClientInitRequest* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gtstore::ClientInitRequest,::gtstore::Ack>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Finalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Finalize() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gtstore::Empty, ::gtstore::Ack>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gtstore::Empty, ::gtstore::Ack>* streamer) {
                       return this->StreamedFinalize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Finalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Finalize(::grpc::ServerContext* /*context*/, const ::gtstore::Empty* /*request*/, ::gtstore::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinalize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gtstore::Empty,::gtstore::Ack>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Finalize<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Finalize<Service > > StreamedService;
};

}  // namespace gtstore


#endif  // GRPC_gtstore_2eproto__INCLUDED
