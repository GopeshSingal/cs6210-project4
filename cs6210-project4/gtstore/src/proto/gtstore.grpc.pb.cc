// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gtstore.proto

#include "gtstore.pb.h"
#include "gtstore.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace gtstore {

static const char* ManagerService_method_names[] = {
  "/gtstore.ManagerService/RegisterNode",
  "/gtstore.ManagerService/GetNodeInfo",
};

std::unique_ptr< ManagerService::Stub> ManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ManagerService::Stub> stub(new ManagerService::Stub(channel, options));
  return stub;
}

ManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterNode_(ManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodeInfo_(ManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ManagerService::Stub::RegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::gtstore::RegisterAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gtstore::NodeInfo, ::gtstore::RegisterAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterNode_, context, request, response);
}

void ManagerService::Stub::async::RegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo* request, ::gtstore::RegisterAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gtstore::NodeInfo, ::gtstore::RegisterAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterNode_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::RegisterNode(::grpc::ClientContext* context, const ::gtstore::NodeInfo* request, ::gtstore::RegisterAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gtstore::RegisterAck>* ManagerService::Stub::PrepareAsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gtstore::RegisterAck, ::gtstore::NodeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gtstore::RegisterAck>* ManagerService::Stub::AsyncRegisterNodeRaw(::grpc::ClientContext* context, const ::gtstore::NodeInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ManagerService::Stub::GetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::gtstore::NodeInfoList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gtstore::Empty, ::gtstore::NodeInfoList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNodeInfo_, context, request, response);
}

void ManagerService::Stub::async::GetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::NodeInfoList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gtstore::Empty, ::gtstore::NodeInfoList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, std::move(f));
}

void ManagerService::Stub::async::GetNodeInfo(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::NodeInfoList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gtstore::NodeInfoList>* ManagerService::Stub::PrepareAsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gtstore::NodeInfoList, ::gtstore::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNodeInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gtstore::NodeInfoList>* ManagerService::Stub::AsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNodeInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

ManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::gtstore::NodeInfo, ::gtstore::RegisterAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gtstore::NodeInfo* req,
             ::gtstore::RegisterAck* resp) {
               return service->RegisterNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ManagerService::Service, ::gtstore::Empty, ::gtstore::NodeInfoList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gtstore::Empty* req,
             ::gtstore::NodeInfoList* resp) {
               return service->GetNodeInfo(ctx, req, resp);
             }, this)));
}

ManagerService::Service::~Service() {
}

::grpc::Status ManagerService::Service::RegisterNode(::grpc::ServerContext* context, const ::gtstore::NodeInfo* request, ::gtstore::RegisterAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ManagerService::Service::GetNodeInfo(::grpc::ServerContext* context, const ::gtstore::Empty* request, ::gtstore::NodeInfoList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StorageNode_method_names[] = {
  "/gtstore.StorageNode/Get",
  "/gtstore.StorageNode/Put",
  "/gtstore.StorageNode/Remove",
};

std::unique_ptr< StorageNode::Stub> StorageNode::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StorageNode::Stub> stub(new StorageNode::Stub(channel, options));
  return stub;
}

StorageNode::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(StorageNode_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Put_(StorageNode_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(StorageNode_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StorageNode::Stub::Get(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::gtstore::ValueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gtstore::KeyRequest, ::gtstore::ValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void StorageNode::Stub::async::Get(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::ValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gtstore::KeyRequest, ::gtstore::ValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void StorageNode::Stub::async::Get(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::ValueResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gtstore::ValueResponse>* StorageNode::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gtstore::ValueResponse, ::gtstore::KeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gtstore::ValueResponse>* StorageNode::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageNode::Stub::Put(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::gtstore::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gtstore::KeyValuePair, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Put_, context, request, response);
}

void StorageNode::Stub::async::Put(::grpc::ClientContext* context, const ::gtstore::KeyValuePair* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gtstore::KeyValuePair, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void StorageNode::Stub::async::Put(::grpc::ClientContext* context, const ::gtstore::KeyValuePair* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* StorageNode::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gtstore::Ack, ::gtstore::KeyValuePair, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Put_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* StorageNode::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::gtstore::KeyValuePair& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageNode::Stub::Remove(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::gtstore::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gtstore::KeyRequest, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void StorageNode::Stub::async::Remove(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gtstore::KeyRequest, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void StorageNode::Stub::async::Remove(::grpc::ClientContext* context, const ::gtstore::KeyRequest* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* StorageNode::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gtstore::Ack, ::gtstore::KeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Remove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* StorageNode::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::gtstore::KeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

StorageNode::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageNode_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageNode::Service, ::gtstore::KeyRequest, ::gtstore::ValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gtstore::KeyRequest* req,
             ::gtstore::ValueResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageNode_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageNode::Service, ::gtstore::KeyValuePair, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gtstore::KeyValuePair* req,
             ::gtstore::Ack* resp) {
               return service->Put(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageNode_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageNode::Service, ::gtstore::KeyRequest, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageNode::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gtstore::KeyRequest* req,
             ::gtstore::Ack* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
}

StorageNode::Service::~Service() {
}

::grpc::Status StorageNode::Service::Get(::grpc::ServerContext* context, const ::gtstore::KeyRequest* request, ::gtstore::ValueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageNode::Service::Put(::grpc::ServerContext* context, const ::gtstore::KeyValuePair* request, ::gtstore::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageNode::Service::Remove(::grpc::ServerContext* context, const ::gtstore::KeyRequest* request, ::gtstore::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ClientService_method_names[] = {
  "/gtstore.ClientService/Init",
  "/gtstore.ClientService/Finalize",
};

std::unique_ptr< ClientService::Stub> ClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientService::Stub> stub(new ClientService::Stub(channel, options));
  return stub;
}

ClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Init_(ClientService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Finalize_(ClientService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientService::Stub::Init(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::gtstore::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gtstore::ClientInitRequest, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Init_, context, request, response);
}

void ClientService::Stub::async::Init(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gtstore::ClientInitRequest, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Init(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* ClientService::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gtstore::Ack, ::gtstore::ClientInitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* ClientService::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::gtstore::ClientInitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientService::Stub::Finalize(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::gtstore::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gtstore::Empty, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Finalize_, context, request, response);
}

void ClientService::Stub::async::Finalize(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gtstore::Empty, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Finalize_, context, request, response, std::move(f));
}

void ClientService::Stub::async::Finalize(::grpc::ClientContext* context, const ::gtstore::Empty* request, ::gtstore::Ack* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Finalize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* ClientService::Stub::PrepareAsyncFinalizeRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gtstore::Ack, ::gtstore::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Finalize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gtstore::Ack>* ClientService::Stub::AsyncFinalizeRaw(::grpc::ClientContext* context, const ::gtstore::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFinalizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::gtstore::ClientInitRequest, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gtstore::ClientInitRequest* req,
             ::gtstore::Ack* resp) {
               return service->Init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::gtstore::Empty, ::gtstore::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gtstore::Empty* req,
             ::gtstore::Ack* resp) {
               return service->Finalize(ctx, req, resp);
             }, this)));
}

ClientService::Service::~Service() {
}

::grpc::Status ClientService::Service::Init(::grpc::ServerContext* context, const ::gtstore::ClientInitRequest* request, ::gtstore::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientService::Service::Finalize(::grpc::ServerContext* context, const ::gtstore::Empty* request, ::gtstore::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gtstore

